//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/CustomPlayerController/Scripts/DebugTool/DebugInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DebugInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DebugInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugInput"",
    ""maps"": [
        {
            ""name"": ""DebugActions"",
            ""id"": ""5e2751c5-7ee9-478a-b4bf-07e0ff1940a6"",
            ""actions"": [
                {
                    ""name"": ""ToggleIsometric"",
                    ""type"": ""Button"",
                    ""id"": ""87461e76-d466-4c55-a2d8-2f3e5024313c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleThirdPerson"",
                    ""type"": ""Button"",
                    ""id"": ""55391433-9036-4752-9e4d-1bc2502a4dc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleFirstPerson"",
                    ""type"": ""Button"",
                    ""id"": ""6fc871f6-3a5a-4722-8558-cd74402809e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleOverShoulder"",
                    ""type"": ""Button"",
                    ""id"": ""46119893-bcc9-4272-9374-ee3000f53cdf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""01db970a-8e61-484d-bb43-7bcfbf4f86da"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleIsometric"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4a6c022-1947-40d8-bec4-31bc1d668dfd"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ToggleIsometric"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a52593b-fd63-410a-91f2-6fedc258990f"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleThirdPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b76fbf1a-e8f6-472f-8ccf-485f5429ed1e"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ToggleThirdPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fea45eb8-c7b9-4248-a62e-449f5d847a2e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleFirstPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d679448d-e9b3-4d32-8451-8f7f8ebebf0e"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ToggleFirstPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2987f2e9-ae9f-4698-9120-b7a6579c21b8"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ToggleOverShoulder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18edbadb-b8e2-423f-b107-7e3e0b409819"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleOverShoulder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // DebugActions
        m_DebugActions = asset.FindActionMap("DebugActions", throwIfNotFound: true);
        m_DebugActions_ToggleIsometric = m_DebugActions.FindAction("ToggleIsometric", throwIfNotFound: true);
        m_DebugActions_ToggleThirdPerson = m_DebugActions.FindAction("ToggleThirdPerson", throwIfNotFound: true);
        m_DebugActions_ToggleFirstPerson = m_DebugActions.FindAction("ToggleFirstPerson", throwIfNotFound: true);
        m_DebugActions_ToggleOverShoulder = m_DebugActions.FindAction("ToggleOverShoulder", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DebugActions
    private readonly InputActionMap m_DebugActions;
    private List<IDebugActionsActions> m_DebugActionsActionsCallbackInterfaces = new List<IDebugActionsActions>();
    private readonly InputAction m_DebugActions_ToggleIsometric;
    private readonly InputAction m_DebugActions_ToggleThirdPerson;
    private readonly InputAction m_DebugActions_ToggleFirstPerson;
    private readonly InputAction m_DebugActions_ToggleOverShoulder;
    public struct DebugActionsActions
    {
        private @DebugInput m_Wrapper;
        public DebugActionsActions(@DebugInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleIsometric => m_Wrapper.m_DebugActions_ToggleIsometric;
        public InputAction @ToggleThirdPerson => m_Wrapper.m_DebugActions_ToggleThirdPerson;
        public InputAction @ToggleFirstPerson => m_Wrapper.m_DebugActions_ToggleFirstPerson;
        public InputAction @ToggleOverShoulder => m_Wrapper.m_DebugActions_ToggleOverShoulder;
        public InputActionMap Get() { return m_Wrapper.m_DebugActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActionsActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsActionsCallbackInterfaces.Add(instance);
            @ToggleIsometric.started += instance.OnToggleIsometric;
            @ToggleIsometric.performed += instance.OnToggleIsometric;
            @ToggleIsometric.canceled += instance.OnToggleIsometric;
            @ToggleThirdPerson.started += instance.OnToggleThirdPerson;
            @ToggleThirdPerson.performed += instance.OnToggleThirdPerson;
            @ToggleThirdPerson.canceled += instance.OnToggleThirdPerson;
            @ToggleFirstPerson.started += instance.OnToggleFirstPerson;
            @ToggleFirstPerson.performed += instance.OnToggleFirstPerson;
            @ToggleFirstPerson.canceled += instance.OnToggleFirstPerson;
            @ToggleOverShoulder.started += instance.OnToggleOverShoulder;
            @ToggleOverShoulder.performed += instance.OnToggleOverShoulder;
            @ToggleOverShoulder.canceled += instance.OnToggleOverShoulder;
        }

        private void UnregisterCallbacks(IDebugActionsActions instance)
        {
            @ToggleIsometric.started -= instance.OnToggleIsometric;
            @ToggleIsometric.performed -= instance.OnToggleIsometric;
            @ToggleIsometric.canceled -= instance.OnToggleIsometric;
            @ToggleThirdPerson.started -= instance.OnToggleThirdPerson;
            @ToggleThirdPerson.performed -= instance.OnToggleThirdPerson;
            @ToggleThirdPerson.canceled -= instance.OnToggleThirdPerson;
            @ToggleFirstPerson.started -= instance.OnToggleFirstPerson;
            @ToggleFirstPerson.performed -= instance.OnToggleFirstPerson;
            @ToggleFirstPerson.canceled -= instance.OnToggleFirstPerson;
            @ToggleOverShoulder.started -= instance.OnToggleOverShoulder;
            @ToggleOverShoulder.performed -= instance.OnToggleOverShoulder;
            @ToggleOverShoulder.canceled -= instance.OnToggleOverShoulder;
        }

        public void RemoveCallbacks(IDebugActionsActions instance)
        {
            if (m_Wrapper.m_DebugActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActionsActions @DebugActions => new DebugActionsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IDebugActionsActions
    {
        void OnToggleIsometric(InputAction.CallbackContext context);
        void OnToggleThirdPerson(InputAction.CallbackContext context);
        void OnToggleFirstPerson(InputAction.CallbackContext context);
        void OnToggleOverShoulder(InputAction.CallbackContext context);
    }
}
