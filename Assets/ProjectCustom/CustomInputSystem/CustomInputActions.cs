//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ProjectCustom/CustomInputSystem/CustomInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""5e83f50d-ba6e-4dc1-a1a2-c86455784de1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b355359e-3ee1-45e9-a826-66c83388c7f5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8fd132bd-ed36-4b1f-80c3-c9a7dceb54df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""9e002070-7928-42dd-a6a1-f70e35746461"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraAxis"",
                    ""type"": ""Value"",
                    ""id"": ""e5d67788-fd8d-4a3f-92a8-336696ee5243"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(y=-1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""7a49d4e5-522b-49b0-9ef7-cfe806ddbd0d"",
                    ""expectedControlType"": """",
                    ""processors"": ""Clamp(min=-1,max=1),Scale(factor=-1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FlightControl"",
                    ""type"": ""Button"",
                    ""id"": ""17670236-78d0-4059-a0c1-5d28f8e6e121"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VerticalAscending"",
                    ""type"": ""Button"",
                    ""id"": ""290b7be8-b3d9-4d9c-a682-0009d5a12cb0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VerticalDescending"",
                    ""type"": ""Button"",
                    ""id"": ""85da9e2f-bf8e-4197-8744-7c4c5657fe0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""MoveAxis"",
                    ""id"": ""bfc0d9d5-5ffe-4890-837e-40ffb7922b2c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fe17319b-1c02-4bb3-80b6-77db02d451a7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""36c9bddb-dc23-44bf-8430-eed467378850"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e1e2500c-b6b6-4406-913f-8b37e7fb4a32"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""de371e04-2a7c-429c-a8cb-2f0c11b0f182"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a920fa72-d85d-4f7e-ae07-d348648d3250"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.2)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5631178b-91e5-4c0a-a1f9-d0e407d87cb4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap(duration=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a639f5d5-1166-48f9-bbb6-d939d11ded7d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Tap(duration=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92f0bd53-e01c-4d4e-a163-0e8fc489a751"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76f81138-9880-4a76-98ee-695bb7c73d62"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3af5d24-9d4e-4bee-86c7-fbba516e50b8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=-1),StickDeadzone(min=0.2)"",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""CameraAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bc6381d-1ad6-4dd2-8bd7-5d044e51810e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.8,y=0.8),StickDeadzone(min=1.401298E-45)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CameraAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1aed2020-e479-462d-9ed6-e1f6bde5e85a"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43a753ce-9e33-442f-9f78-34bd208bbd12"",
                    ""path"": ""<Gamepad>/dpad/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""078b671a-9367-4fb1-b1eb-0889bcd04d1b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""MultiTap(tapDelay=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""FlightControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ca511ba-0e14-42f2-aaf4-f2529436a7f3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""MultiTap(tapDelay=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""FlightControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""948908ca-b4c0-4186-96d0-cf78ff7b9eab"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold(duration=0.6)"",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""VerticalAscending"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ce64e9f-3c7a-4f1f-9780-f9a9ebdf5a2f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Hold(duration=0.6)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""VerticalAscending"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1217da78-fddc-4ad0-8198-43e53cbde8cc"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": ""Hold(duration=0.6)"",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""VerticalDescending"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab6ef6fb-06c4-42b0-9ac7-cf596084f9ac"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": ""Hold(duration=0.6)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""VerticalDescending"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameControllerActions"",
            ""id"": ""47375ca4-a452-4715-b85a-77a8241497d2"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""c6e060d4-dd04-4bb4-9a67-3088348e8155"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigation"",
                    ""type"": ""Value"",
                    ""id"": ""6a75da69-63a6-4257-9b05-212161477eb5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a96c8dd3-fefc-42d4-a837-b30e5e39c5d1"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eddbd042-f396-4ea6-9f84-0727585ec4dd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed10c711-bd8e-4fb2-8bf6-679cebc7016e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87451039-64dc-4630-aef1-f68d857286c2"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DriverActions"",
            ""id"": ""d2c0972f-4298-46f6-b765-fa361d98b8cb"",
            ""actions"": [
                {
                    ""name"": ""Accelerator"",
                    ""type"": ""Value"",
                    ""id"": ""f40f9e27-1cd2-40c2-a23b-aab69b53bab3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""7ed4bb8a-5e30-4491-8e25-aff5fbf9eceb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""9f3f5850-92d3-4d5a-a2cc-c8f86553ef32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f49bbbf-4432-4ae1-b60d-c596852d9a39"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Accelerator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d99a907-87c1-4871-9d44-e5c14b68a28b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7704b82d-c10f-4b88-a5b2-444bec915118"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse&Keyboard"",
            ""bindingGroup"": ""Mouse&Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Move = m_PlayerActions.FindAction("Move", throwIfNotFound: true);
        m_PlayerActions_Jump = m_PlayerActions.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActions_Sprint = m_PlayerActions.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerActions_CameraAxis = m_PlayerActions.FindAction("CameraAxis", throwIfNotFound: true);
        m_PlayerActions_Zoom = m_PlayerActions.FindAction("Zoom", throwIfNotFound: true);
        m_PlayerActions_FlightControl = m_PlayerActions.FindAction("FlightControl", throwIfNotFound: true);
        m_PlayerActions_VerticalAscending = m_PlayerActions.FindAction("VerticalAscending", throwIfNotFound: true);
        m_PlayerActions_VerticalDescending = m_PlayerActions.FindAction("VerticalDescending", throwIfNotFound: true);
        // GameControllerActions
        m_GameControllerActions = asset.FindActionMap("GameControllerActions", throwIfNotFound: true);
        m_GameControllerActions_Pause = m_GameControllerActions.FindAction("Pause", throwIfNotFound: true);
        m_GameControllerActions_Navigation = m_GameControllerActions.FindAction("Navigation", throwIfNotFound: true);
        // DriverActions
        m_DriverActions = asset.FindActionMap("DriverActions", throwIfNotFound: true);
        m_DriverActions_Accelerator = m_DriverActions.FindAction("Accelerator", throwIfNotFound: true);
        m_DriverActions_Steer = m_DriverActions.FindAction("Steer", throwIfNotFound: true);
        m_DriverActions_Brake = m_DriverActions.FindAction("Brake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_Move;
    private readonly InputAction m_PlayerActions_Jump;
    private readonly InputAction m_PlayerActions_Sprint;
    private readonly InputAction m_PlayerActions_CameraAxis;
    private readonly InputAction m_PlayerActions_Zoom;
    private readonly InputAction m_PlayerActions_FlightControl;
    private readonly InputAction m_PlayerActions_VerticalAscending;
    private readonly InputAction m_PlayerActions_VerticalDescending;
    public struct PlayerActionsActions
    {
        private @CustomInputActions m_Wrapper;
        public PlayerActionsActions(@CustomInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerActions_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerActions_Jump;
        public InputAction @Sprint => m_Wrapper.m_PlayerActions_Sprint;
        public InputAction @CameraAxis => m_Wrapper.m_PlayerActions_CameraAxis;
        public InputAction @Zoom => m_Wrapper.m_PlayerActions_Zoom;
        public InputAction @FlightControl => m_Wrapper.m_PlayerActions_FlightControl;
        public InputAction @VerticalAscending => m_Wrapper.m_PlayerActions_VerticalAscending;
        public InputAction @VerticalDescending => m_Wrapper.m_PlayerActions_VerticalDescending;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @CameraAxis.started += instance.OnCameraAxis;
            @CameraAxis.performed += instance.OnCameraAxis;
            @CameraAxis.canceled += instance.OnCameraAxis;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @FlightControl.started += instance.OnFlightControl;
            @FlightControl.performed += instance.OnFlightControl;
            @FlightControl.canceled += instance.OnFlightControl;
            @VerticalAscending.started += instance.OnVerticalAscending;
            @VerticalAscending.performed += instance.OnVerticalAscending;
            @VerticalAscending.canceled += instance.OnVerticalAscending;
            @VerticalDescending.started += instance.OnVerticalDescending;
            @VerticalDescending.performed += instance.OnVerticalDescending;
            @VerticalDescending.canceled += instance.OnVerticalDescending;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @CameraAxis.started -= instance.OnCameraAxis;
            @CameraAxis.performed -= instance.OnCameraAxis;
            @CameraAxis.canceled -= instance.OnCameraAxis;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @FlightControl.started -= instance.OnFlightControl;
            @FlightControl.performed -= instance.OnFlightControl;
            @FlightControl.canceled -= instance.OnFlightControl;
            @VerticalAscending.started -= instance.OnVerticalAscending;
            @VerticalAscending.performed -= instance.OnVerticalAscending;
            @VerticalAscending.canceled -= instance.OnVerticalAscending;
            @VerticalDescending.started -= instance.OnVerticalDescending;
            @VerticalDescending.performed -= instance.OnVerticalDescending;
            @VerticalDescending.canceled -= instance.OnVerticalDescending;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // GameControllerActions
    private readonly InputActionMap m_GameControllerActions;
    private List<IGameControllerActionsActions> m_GameControllerActionsActionsCallbackInterfaces = new List<IGameControllerActionsActions>();
    private readonly InputAction m_GameControllerActions_Pause;
    private readonly InputAction m_GameControllerActions_Navigation;
    public struct GameControllerActionsActions
    {
        private @CustomInputActions m_Wrapper;
        public GameControllerActionsActions(@CustomInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_GameControllerActions_Pause;
        public InputAction @Navigation => m_Wrapper.m_GameControllerActions_Navigation;
        public InputActionMap Get() { return m_Wrapper.m_GameControllerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameControllerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IGameControllerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameControllerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameControllerActionsActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Navigation.started += instance.OnNavigation;
            @Navigation.performed += instance.OnNavigation;
            @Navigation.canceled += instance.OnNavigation;
        }

        private void UnregisterCallbacks(IGameControllerActionsActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Navigation.started -= instance.OnNavigation;
            @Navigation.performed -= instance.OnNavigation;
            @Navigation.canceled -= instance.OnNavigation;
        }

        public void RemoveCallbacks(IGameControllerActionsActions instance)
        {
            if (m_Wrapper.m_GameControllerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameControllerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameControllerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameControllerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameControllerActionsActions @GameControllerActions => new GameControllerActionsActions(this);

    // DriverActions
    private readonly InputActionMap m_DriverActions;
    private List<IDriverActionsActions> m_DriverActionsActionsCallbackInterfaces = new List<IDriverActionsActions>();
    private readonly InputAction m_DriverActions_Accelerator;
    private readonly InputAction m_DriverActions_Steer;
    private readonly InputAction m_DriverActions_Brake;
    public struct DriverActionsActions
    {
        private @CustomInputActions m_Wrapper;
        public DriverActionsActions(@CustomInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerator => m_Wrapper.m_DriverActions_Accelerator;
        public InputAction @Steer => m_Wrapper.m_DriverActions_Steer;
        public InputAction @Brake => m_Wrapper.m_DriverActions_Brake;
        public InputActionMap Get() { return m_Wrapper.m_DriverActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DriverActionsActions set) { return set.Get(); }
        public void AddCallbacks(IDriverActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_DriverActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DriverActionsActionsCallbackInterfaces.Add(instance);
            @Accelerator.started += instance.OnAccelerator;
            @Accelerator.performed += instance.OnAccelerator;
            @Accelerator.canceled += instance.OnAccelerator;
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
        }

        private void UnregisterCallbacks(IDriverActionsActions instance)
        {
            @Accelerator.started -= instance.OnAccelerator;
            @Accelerator.performed -= instance.OnAccelerator;
            @Accelerator.canceled -= instance.OnAccelerator;
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
        }

        public void RemoveCallbacks(IDriverActionsActions instance)
        {
            if (m_Wrapper.m_DriverActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDriverActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_DriverActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DriverActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DriverActionsActions @DriverActions => new DriverActionsActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse&Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCameraAxis(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnFlightControl(InputAction.CallbackContext context);
        void OnVerticalAscending(InputAction.CallbackContext context);
        void OnVerticalDescending(InputAction.CallbackContext context);
    }
    public interface IGameControllerActionsActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnNavigation(InputAction.CallbackContext context);
    }
    public interface IDriverActionsActions
    {
        void OnAccelerator(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
    }
}
